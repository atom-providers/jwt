// Code generated by go-enum DO NOT EDIT.
// Version: -
// Revision: -
// Build Date: -
// Built By: -

package jwt

import (
	"database/sql/driver"
	"errors"
	"fmt"
	"strings"
)

const (
	// RoleDefault is a Role of type default.
	RoleDefault Role = ""
	// RoleSuperAdmin is a Role of type super_admin.
	RoleSuperAdmin Role = "super_admin"
	// RoleAdmin is a Role of type admin.
	RoleAdmin Role = "admin"
	// RoleTenantAdmin is a Role of type tenant_admin.
	RoleTenantAdmin Role = "tenant_admin"
	// RoleUser is a Role of type user.
	RoleUser Role = "user"
)

var ErrInvalidRole = fmt.Errorf("not a valid Role, try [%s]", strings.Join(_RoleNames, ", "))

var _RoleNames = []string{
	string(RoleDefault),
	string(RoleSuperAdmin),
	string(RoleAdmin),
	string(RoleTenantAdmin),
	string(RoleUser),
}

// RoleNames returns a list of possible string values of Role.
func RoleNames() []string {
	tmp := make([]string, len(_RoleNames))
	copy(tmp, _RoleNames)
	return tmp
}

// RoleValues returns a list of the values for Role
func RoleValues() []Role {
	return []Role{
		RoleDefault,
		RoleSuperAdmin,
		RoleAdmin,
		RoleTenantAdmin,
		RoleUser,
	}
}

// String implements the Stringer interface.
func (x Role) String() string {
	return string(x)
}

// IsValid provides a quick way to determine if the typed value is
// part of the allowed enumerated values
func (x Role) IsValid() bool {
	_, err := ParseRole(string(x))
	return err == nil
}

var _RoleValue = map[string]Role{
	"":             RoleDefault,
	"super_admin":  RoleSuperAdmin,
	"admin":        RoleAdmin,
	"tenant_admin": RoleTenantAdmin,
	"user":         RoleUser,
}

// ParseRole attempts to convert a string to a Role.
func ParseRole(name string) (Role, error) {
	if x, ok := _RoleValue[name]; ok {
		return x, nil
	}
	return Role(""), fmt.Errorf("%s is %w", name, ErrInvalidRole)
}

var errRoleNilPtr = errors.New("value pointer is nil") // one per type for package clashes

// Scan implements the Scanner interface.
func (x *Role) Scan(value interface{}) (err error) {
	if value == nil {
		*x = Role("")
		return
	}

	// A wider range of scannable types.
	// driver.Value values at the top of the list for expediency
	switch v := value.(type) {
	case string:
		*x, err = ParseRole(v)
	case []byte:
		*x, err = ParseRole(string(v))
	case Role:
		*x = v
	case *Role:
		if v == nil {
			return errRoleNilPtr
		}
		*x = *v
	case *string:
		if v == nil {
			return errRoleNilPtr
		}
		*x, err = ParseRole(*v)
	default:
		return errors.New("invalid type for Role")
	}

	return
}

// Value implements the driver Valuer interface.
func (x Role) Value() (driver.Value, error) {
	return x.String(), nil
}

// Set implements the Golang flag.Value interface func.
func (x *Role) Set(val string) error {
	v, err := ParseRole(val)
	*x = v
	return err
}

// Get implements the Golang flag.Getter interface func.
func (x *Role) Get() interface{} {
	return *x
}

// Type implements the github.com/spf13/pFlag Value interface.
func (x *Role) Type() string {
	return "Role"
}

type NullRole struct {
	Role  Role
	Valid bool
}

func NewNullRole(val interface{}) (x NullRole) {
	err := x.Scan(val) // yes, we ignore this error, it will just be an invalid value.
	_ = err            // make any errcheck linters happy
	return
}

// Scan implements the Scanner interface.
func (x *NullRole) Scan(value interface{}) (err error) {
	if value == nil {
		x.Role, x.Valid = Role(""), false
		return
	}

	err = x.Role.Scan(value)
	x.Valid = (err == nil)
	return
}

// Value implements the driver Valuer interface.
func (x NullRole) Value() (driver.Value, error) {
	if !x.Valid {
		return nil, nil
	}
	// driver.Value accepts int64 for int values.
	return string(x.Role), nil
}

type NullRoleStr struct {
	NullRole
}

func NewNullRoleStr(val interface{}) (x NullRoleStr) {
	x.Scan(val) // yes, we ignore this error, it will just be an invalid value.
	return
}

// Value implements the driver Valuer interface.
func (x NullRoleStr) Value() (driver.Value, error) {
	if !x.Valid {
		return nil, nil
	}
	return x.Role.String(), nil
}
